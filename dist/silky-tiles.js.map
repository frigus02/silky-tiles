{"version":3,"file":"silky-tiles.js","sources":["../src/helpers/listenable-mixin.js","../src/helpers/utils.js","../src/helpers/drag-handler.js","../src/layouts/base-layout.js","../src/helpers/grid-layout-helper.js","../src/layouts/column-layout.js","../src/layouts/flow-layout.js","../src/adapters/base-adapter.js","../src/adapters/dom-adapter.js","../src/index.js"],"sourcesContent":["const ListenableMixin = (superclass = Object) => class extends superclass {\n    constructor() {\n        super();\n        this._listeners = {};\n    }\n\n    addEventListener(eventName, callback) {\n        this._getListeners(eventName).push(callback);\n    }\n\n    dispatchEvent(eventName, ...args) {\n        const listeners = this._getListeners(eventName);\n        for (const listener of listeners) {\n            listener(...args);\n        }\n    }\n\n    removeEventListener(eventName, callback) {\n        const listeners = this._getListeners(eventName);\n        const index = listeners.indexOf(callback);\n        if (index > -1) {\n            listeners.splice(index, 1);\n        }\n    }\n\n    _getListeners(eventName) {\n        if (!this._listeners.hasOwnProperty(eventName)) {\n            this._listeners[eventName] = [];\n        }\n\n        return this._listeners[eventName];\n    }\n};\n\nexport default ListenableMixin;\n","export function getTouchCoordinate(evt, prop) {\n    if (evt.touches && evt.touches.length > 0) {\n        return evt.touches[0][prop];\n    } else {\n        return evt[prop];\n    }\n}\n","import ListenableMixin from './listenable-mixin';\nimport {getTouchCoordinate} from './utils';\n\n/**\n * Supported events: dragstart, dragend, tilemoved\n */\nexport default class DragHandler extends ListenableMixin() {\n    constructor(silkyTiles) {\n        super();\n\n        this._silkyTiles = silkyTiles;\n        this._adapter = null;\n        this._tile = null;\n        this._startX = 0;\n        this._startY = 0;\n        this._currentX = 0;\n        this._currentY = 0;\n\n        this._initEventListeners = this._initEventListeners.bind(this);\n        this._destroyEventListeners = this._destroyEventListeners.bind(this);\n        this._onDragStart = this._onDragStart.bind(this);\n        this._onDragMove = this._onDragMove.bind(this);\n        this._onDragEnd = this._onDragEnd.bind(this);\n    }\n\n    get adapter() {\n        return this._adapter;\n    }\n\n    set adapter(adapter) {\n        if (this._adapter) {\n            this._adapter.removeEventListener('tileadded', this._initEventListeners);\n            this._adapter.tiles.forEach(this._destroyEventListeners);\n        }\n\n        this._adapter = adapter;\n        this._adapter.tiles.forEach(this._initEventListeners);\n        this._adapter.addEventListener('tileadded', this._initEventListeners);\n    }\n\n    _initEventListeners(tile) {\n        if (window.PointerEvent) {\n            tile.addEventListener('pointerdown', this._onDragStart);\n        } else {\n            tile.addEventListener('touchstart', this._onDragStart);\n            tile.addEventListener('mousedown', this._onDragStart);\n        }\n    }\n\n    _destroyEventListeners(tile) {\n        if (window.PointerEvent) {\n            tile.removeEventListener('pointerdown', this._onDragStart);\n        } else {\n            tile.removeEventListener('touchstart', this._onDragStart);\n            tile.removeEventListener('mousedown', this._onDragStart);\n        }\n    }\n\n    _onDragStart(evt) {\n        if (this._tile) return;\n\n        evt.preventDefault();\n\n        this._tile = evt.currentTarget;\n\n        const currentPosition = this._silkyTiles.getTilePosition(this._tile);\n\n        this._currentX = getTouchCoordinate(evt, 'pageX');\n        this._currentY = getTouchCoordinate(evt, 'pageY');\n        this._startX = this._currentX - currentPosition.x;\n        this._startY = this._currentY - currentPosition.y;\n\n        this._tile.classList.add('st-is-dragging');\n\n        if (window.PointerEvent) {\n            this._tile.addEventListener('pointermove', this._onDragMove);\n            this._tile.addEventListener('pointerup', this._onDragEnd);\n            this._tile.addEventListener('pointercancel', this._onDragEnd);\n\n            this._tile.setPointerCapture(evt.pointerId);\n        } else {\n            document.addEventListener('touchmove', this._onDragMove);\n            document.addEventListener('touchend', this._onDragEnd);\n            document.addEventListener('mousemove', this._onDragMove);\n            document.addEventListener('mouseup', this._onDragEnd);\n        }\n\n        this.dispatchEvent('dragstart', this._tile);\n    }\n\n    _onDragMove(evt) {\n        if (!this._tile) return;\n\n        this._currentX = getTouchCoordinate(evt, 'pageX');\n        this._currentY = getTouchCoordinate(evt, 'pageY');\n    }\n\n    _onDragEnd() {\n        if (!this._tile) return;\n\n        if (window.PointerEvent) {\n            this._tile.removeEventListener('pointermove', this._onDragMove);\n            this._tile.removeEventListener('pointerup', this._onDragEnd);\n            this._tile.removeEventListener('pointercancel', this._onDragEnd);\n        } else {\n            document.removeEventListener('touchmove', this._onDragMove);\n            document.removeEventListener('touchend', this._onDragEnd);\n            document.removeEventListener('mousemove', this._onDragMove);\n            document.removeEventListener('mouseup', this._onDragEnd);\n        }\n\n        this._tile.classList.remove('st-is-dragging');\n\n        this.dispatchEvent('dragend', this._tile);\n\n        this._tile = null;\n    }\n\n    _getTileAtPosition(x, y) {\n        for (let tile of this._adapter.tiles) {\n            const position = this._silkyTiles.getTilePosition(tile);\n\n            if (tile !== this._tile &&\n                x > position.x && x < position.x + position.width &&\n                y > position.y && y < position.y + position.height) {\n                return tile;\n            }\n        }\n    }\n\n    layout() {\n        if (!this._tile) return;\n\n        const containerBounds = this._adapter.getContainerBounds();\n        const targetTile = this._getTileAtPosition(\n            this._currentX - containerBounds.absoluteLeft,\n            this._currentY - containerBounds.absoluteTop);\n\n        if (targetTile) {\n            this.dispatchEvent('tilemoved', this._tile, targetTile);\n        }\n\n        return {\n            x: this._currentX - this._startX,\n            y: this._currentY - this._startY\n        };\n    }\n}\n","export default class BaseLayout {\n    constructor() {\n        this._positions = new WeakMap();\n    }\n\n    get height() {\n    }\n\n    getTilePosition(tile) {\n        return this._positions.get(tile);\n    }\n\n    layout(layoutParamsGetter) {\n        const changedTiles = [];\n        this.onLayout(layoutParamsGetter, (tile, position) => {\n            const lastPosition = this._positions.get(tile);\n            if (!lastPosition ||\n                lastPosition.x !== position.x ||\n                lastPosition.y !== position.y ||\n                lastPosition.width !== position.width ||\n                lastPosition.height !== position.height) {\n                this._positions.set(tile, position);\n                changedTiles.push(tile);\n            }\n        });\n\n        return changedTiles;\n    }\n\n    /**\n     * Called during the layout phase. Implementations should calculate\n     * the new coordinates for all changed tiles and set them using the\n     * passed tilePositionSetter.\n     */\n    onLayout(/*layoutParamsGetter, tilePositionSetter*/) {\n    }\n\n    /**\n     * Called when a new tile is added to the grid. The tile\n     * will always be positioned at the end of the grid.\n     */\n    onTileAdded(/*tile*/) {\n    }\n\n    /**\n     * Called when layout params of a tile change, such as the\n     * position, width or height.\n     */\n    onTileChanged(/*tile*/) {\n    }\n\n    /**\n     * Called when a tile is removed from the grid.\n     */\n    onTileRemoved(/*tile*/) {\n    }\n\n    /**\n     * Called when the user moved a tile from one position to another.\n     * The function gets the tile and the tile it was moved on top on.\n     * It should return new positions for all tiles, which change\n     * as a result of this action.\n     *\n     * @return {Array} Tiles, which changes positions because of the action.\n     */\n    onTileMoved(/*tile, targetTile, layoutParamsGetter*/) {\n        return [\n            /*{\n                tile: someTile,\n                newPosition: 12\n            }*/\n        ];\n    }\n\n    /**\n     * Called when the width of the container has changed.\n     */\n    onWidthChanged(/*width*/) {\n    }\n}\n","export default class GridLayoutHandler {\n    constructor() {\n        this._grid = [];\n        this._tilesInRow = 1;\n    }\n\n    addTile(tile, layoutParams) {\n        // In case the tile does not fit into the grid at all, at\n        // least make sure it takes to full width.\n        const tileWidth = Math.min(layoutParams.width, this._tilesInRow);\n        const tileHeight = layoutParams.height;\n\n        // Find first free spot\n        let rowIndexStart,\n            rowIndexEnd,\n            colIndexStart,\n            colIndexEnd;\n\n        rowLoop:\n        for (rowIndexStart = 0, rowIndexEnd = tileHeight - 1; ; rowIndexStart++, rowIndexEnd++) {\n            for (colIndexStart = 0, colIndexEnd = tileWidth - 1; colIndexEnd < this._tilesInRow; colIndexStart++, colIndexEnd++) {\n                if (this._doesTileFitIntoPosition(rowIndexStart, rowIndexEnd, colIndexStart, colIndexEnd)) {\n                    break rowLoop;\n                }\n            }\n        }\n\n        // Occupy spot\n        for (let rowIndex = rowIndexStart; rowIndex <= rowIndexEnd; rowIndex++) {\n            while (this._grid.length <= rowIndex) {\n                this._grid.push(new Array(this._tilesInRow));\n            }\n\n            for (let colIndex = colIndexStart; colIndex <= colIndexEnd; colIndex++) {\n                this._grid[rowIndex][colIndex] = tile;\n            }\n        }\n\n        return {\n            row: rowIndexStart,\n            col: colIndexStart\n        };\n    }\n\n    includesTile(tile) {\n        return this._grid.some(r => r.includes(tile));\n    }\n\n    getTilePosition(tile) {\n        const row = this._grid.findIndex(r => r.includes(tile));\n        const col = this._grid[row].indexOf(tile);\n\n        return {\n            row,\n            col\n        };\n    }\n\n    _doesTileFitIntoPosition(rowIndexStart, rowIndexEnd, colIndexStart, colIndexEnd) {\n        for (let rowIndex = rowIndexStart; rowIndex <= rowIndexEnd; rowIndex++) {\n            const row = this._grid[rowIndex];\n            if (!row) break;\n\n            for (let colIndex = colIndexStart; colIndex <= colIndexEnd; colIndex++) {\n                if (typeof row[colIndex] !== 'undefined') {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    reset(tilesInRow) {\n        this._grid = [];\n        this._tilesInRow = tilesInRow;\n    }\n}\n","import BaseLayout from './base-layout';\nimport GridLayoutHelper from '../helpers/grid-layout-helper';\n\nexport default class ColumnLayout extends BaseLayout {\n    constructor(options) {\n        super();\n\n        this._options = {\n            columns: 5,\n            margin: 8,\n            outerMargin: true,\n            moveMode: 'switch' // switch || push\n        };\n        Object.assign(this._options, options);\n\n        this._tiles = [];\n        this._queue = [];\n        this._grid = new GridLayoutHelper();\n        this._grid.reset(this._options.columns);\n        this._tileWidth = 1;\n        this._height = 0;\n    }\n\n    get height() {\n        return this._height;\n    }\n\n    onLayout(layoutParamsGetter, tilePositionSetter) {\n        const queue = this._queue\n            .map(tile => ({\n                tile,\n                layoutParams: layoutParamsGetter(tile)\n            }))\n            .sort((a, b) => a.layoutParams.position - b.layoutParams.position);\n        this._queue = [];\n\n        queue.forEach(({tile, layoutParams}) => {\n            const {row, col} = this._grid.includesTile(tile)\n                ? this._grid.getTilePosition(tile)\n                : this._grid.addTile(tile, layoutParams);\n\n            let translateX = col * (this._tileWidth + this._options.margin);\n            let translateY = row * (this._tileWidth + this._options.margin);\n            if (this._options.outerMargin) {\n                translateX += this._options.margin;\n                translateY += this._options.margin;\n            }\n\n            this._height = Math.max(\n                this._height,\n                (row + 1) * (this._tileWidth + this._options.margin) + (this._options.outerMargin ? this._options.margin : -this._options.margin));\n\n            tilePositionSetter(tile, {\n                x: translateX,\n                y: translateY,\n                width: (this._tileWidth + this._options.margin) * layoutParams.width - this._options.margin,\n                height: (this._tileWidth + this._options.margin) * layoutParams.height - this._options.margin\n            });\n        });\n\n        return queue;\n    }\n\n    onTileAdded(tile) {\n        this._tiles.push(tile);\n        this._queue.push(tile);\n    }\n\n    onTileChanged(tile) {\n        this._grid.reset(this._tilesInRow);\n        this._height = 0;\n        this._queue = [...this._tiles];\n    }\n\n    onTileRemoved(tile) {\n        const index = this._tiles.indexOf(tile);\n        if (index > -1) {\n            this._tiles.splice(index, 1);\n\n            this._grid.reset(this._tilesInRow);\n            this._height = 0;\n            this._queue = [...this._tiles];\n        }\n    }\n\n    onTileMoved(tile, targetTile, layoutParamsGetter) {\n        const position = layoutParamsGetter(tile).position;\n        const targetPosition = layoutParamsGetter(targetTile).position;\n        const changedTiles = [];\n\n        if (this._options.moveMode === 'switch') {\n            changedTiles.push(\n                {\n                    tile: tile,\n                    newPosition: targetPosition\n                },\n                {\n                    tile: targetTile,\n                    newPosition: position\n                }\n            );\n        } else if (this._options.moveMode === 'push') {\n            const tilePositions = {};\n            for (const tile of this._tiles) {\n                const position = layoutParamsGetter(tile).position;\n                tilePositions[position] = tile;\n            }\n\n            const modifier = position > targetPosition ? 1 : -1;\n            changedTiles.push(\n                {\n                    tile: tile,\n                    newPosition: targetPosition\n                },\n                {\n                    tile: targetTile,\n                    newPosition: targetPosition + modifier\n                }\n            );\n\n            const from = Math.min(position, targetPosition) + 1;\n            const to = Math.max(position, targetPosition) - 1;\n\n            for (let middlePosition = from; middlePosition <= to; middlePosition++) {\n                const middleTile = tilePositions[middlePosition];\n                if (middleTile) {\n                    changedTiles.push({\n                        tile: middleTile,\n                        newPosition: middlePosition + modifier\n                    });\n                }\n            }\n        }\n\n        this._grid.reset(this._tilesInRow);\n        this._height = 0;\n        this._queue = [...this._tiles];\n\n        return changedTiles;\n    }\n\n    onWidthChanged(width) {\n        if (this._options.outerMargin) {\n            this._tileWidth = (width - (this._options.columns + 1) * this._options.margin) / this._options.columns;\n        } else {\n            this._tileWidth = (width - (this._options.columns - 1) * this._options.margin) / this._options.columns;\n        }\n\n        this._height = 0;\n        this._queue = [...this._tiles];\n    }\n}\n","import BaseLayout from './base-layout';\nimport GridLayoutHelper from '../helpers/grid-layout-helper';\n\nexport default class FlowLayout extends BaseLayout {\n    constructor(options) {\n        super();\n\n        this._options = {\n            tileWidth: 96,\n            tileHeight: 96,\n            margin: 8,\n            outerMargin: true,\n            moveMode: 'switch' // switch || push\n        };\n        Object.assign(this._options, options);\n\n        this._tiles = [];\n        this._queue = [];\n\n        this._tilesInRow = 1;\n        this._grid = new GridLayoutHelper();\n        this._height = 0;\n    }\n\n    get height() {\n        return this._height;\n    }\n\n    onLayout(layoutParamsGetter, tilePositionSetter) {\n        const queue = this._queue\n            .map(tile => ({\n                tile,\n                layoutParams: layoutParamsGetter(tile)\n            }))\n            .sort((a, b) => a.layoutParams.position - b.layoutParams.position);\n        this._queue = [];\n\n        queue.forEach(({tile, layoutParams}) => {\n            const {row, col} = this._grid.addTile(tile, layoutParams);\n\n            let translateX = col * (this._options.tileWidth + this._options.margin);\n            let translateY = row * (this._options.tileHeight + this._options.margin);\n            if (this._options.outerMargin) {\n                translateX += this._options.margin;\n                translateY += this._options.margin;\n            }\n\n            this._height = Math.max(\n                this._height,\n                (row + layoutParams.height) * (this._options.tileHeight + this._options.margin) + (this._options.outerMargin ? this._options.margin : -this._options.margin));\n\n            tilePositionSetter(tile, {\n                x: translateX,\n                y: translateY,\n                width: (this._options.tileWidth + this._options.margin) * layoutParams.width - this._options.margin,\n                height: (this._options.tileHeight + this._options.margin) * layoutParams.height - this._options.margin\n            });\n        });\n    }\n\n    onTileAdded(tile) {\n        this._tiles.push(tile);\n        this._queue.push(tile);\n    }\n\n    onTileChanged(tile) {\n        this._grid.reset(this._tilesInRow);\n        this._height = 0;\n        this._queue = [...this._tiles];\n    }\n\n    onTileRemoved(tile) {\n        const index = this._tiles.indexOf(tile);\n        if (index > -1) {\n            this._tiles.splice(index, 1);\n\n            this._grid.reset(this._tilesInRow);\n            this._height = 0;\n            this._queue = [...this._tiles];\n        }\n    }\n\n    onTileMoved(tile, targetTile, layoutParamsGetter) {\n        const position = layoutParamsGetter(tile).position;\n        const targetPosition = layoutParamsGetter(targetTile).position;\n        const changedTiles = [];\n\n        if (this._options.moveMode === 'switch') {\n            changedTiles.push(\n                {\n                    tile: tile,\n                    newPosition: targetPosition\n                },\n                {\n                    tile: targetTile,\n                    newPosition: position\n                }\n            );\n        } else if (this._options.moveMode === 'push') {\n            const tilePositions = {};\n            for (const tile of this._tiles) {\n                const position = layoutParamsGetter(tile).position;\n                tilePositions[position] = tile;\n            }\n\n            const modifier = position > targetPosition ? 1 : -1;\n            changedTiles.push(\n                {\n                    tile: tile,\n                    newPosition: targetPosition\n                },\n                {\n                    tile: targetTile,\n                    newPosition: targetPosition + modifier\n                }\n            );\n\n            const from = Math.min(position, targetPosition) + 1;\n            const to = Math.max(position, targetPosition) - 1;\n\n            for (let middlePosition = from; middlePosition <= to; middlePosition++) {\n                const middleTile = tilePositions[middlePosition];\n                if (middleTile) {\n                    changedTiles.push({\n                        tile: middleTile,\n                        newPosition: middlePosition + modifier\n                    });\n                }\n            }\n        }\n\n        this._grid.reset(this._tilesInRow);\n        this._height = 0;\n        this._queue = [...this._tiles];\n\n        return changedTiles;\n    }\n\n    onWidthChanged(width) {\n        if (this._options.outerMargin) {\n            this._tilesInRow = Math.floor((width - this._options.margin) / (this._options.tileWidth + this._options.margin));\n        } else {\n            this._tilesInRow = Math.floor((width + this._options.margin) / (this._options.tileWidth + this._options.margin));\n        }\n\n        if (this._tilesInRow < 1) {\n            this._tilesInRow = 1;\n        }\n\n        // Need to layout all tiles now.\n        this._grid.reset(this._tilesInRow);\n        this._height = 0;\n        this._queue = [...this._tiles];\n    }\n}\n","import ListenableMixin from '../helpers/listenable-mixin';\n\n/**\n * Supported events: tileadded, tilechanged, tileremoved\n */\nexport default class BaseAdapter extends ListenableMixin() {\n    constructor() {\n        super();\n    }\n\n    get container() {\n        return undefined;\n    }\n\n    get tiles() {\n        return [];\n    }\n\n    getContainerBounds() {\n        return {\n            /*top: 12,\n            left: 12,\n            absoluteTop: 120,\n            absoluteLeft: 80*/\n        };\n    }\n\n    getTileBounds(/*tile*/) {\n        return {\n            /*width: 100,\n            height: 100,\n            x: 12,\n            y: 12*/\n        };\n    }\n\n    getTileLayoutParams(/*tile*/) {\n    }\n\n    onTilePositionChanged(/*tile, newPosition*/) {\n    }\n}\n","import BaseAdapter from './base-adapter';\n\nexport default class DomAdapter extends BaseAdapter {\n    constructor(containerElement) {\n        super();\n\n        this._containerElement = containerElement;\n        this._containerElement.classList.add('st-container');\n        this._tiles = Array.from(containerElement.children);\n        this._tiles.forEach(tile => {\n            tile.classList.add('st-tile');\n        })\n\n        this._onChildrenMutated = this._onChildrenMutated.bind(this);\n\n        this._observer = new MutationObserver(this._onChildrenMutated);\n        this._observer.observe(containerElement, {\n            childList: true\n        });\n    }\n\n    _onChildrenMutated(records) {\n        for (const record of records) {\n            for (const node of record.addedNodes) {\n                if (node instanceof Element) {\n                    node.classList.add('st-tile');\n                    this._tiles.push(node);\n                    this.dispatchEvent('tileadded', node);\n                }\n            }\n\n            for (const node of record.removedNodes) {\n                if (node instanceof Element) {\n                    const index = this._tiles.indexOf(node);\n                    this._tiles.splice(index, 1);\n                    this.dispatchEvent('tileremoved', node);\n                }\n            }\n        }\n    }\n\n    get container() {\n        return this._containerElement;\n    }\n\n    get tiles() {\n        return this._tiles;\n    }\n\n    getContainerBounds() {\n        const bounds = this._containerElement.getBoundingClientRect();\n\n        let absoluteTop = 0;\n        let absoluteLeft = 0;\n        let currentElement = this._containerElement;\n        do {\n            absoluteTop += currentElement.offsetTop;\n            absoluteLeft += currentElement.offsetLeft;\n            currentElement = currentElement.offsetParent;\n        } while (currentElement);\n\n        return {\n            top: bounds.top,\n            left: bounds.left,\n            absoluteTop,\n            absoluteLeft\n        };\n    }\n\n    getTileBounds(tile) {\n        const containerBounds = this.getContainerBounds();\n        const bounds = tile.getBoundingClientRect();\n\n        return {\n            width: bounds.width,\n            height: bounds.width,\n            x: bounds.left - containerBounds.left,\n            y: bounds.top - containerBounds.top\n        };\n    }\n\n    getTileLayoutParams(tile) {\n        return {\n            position: parseInt(tile.dataset.tilePosition, 10),\n            width: parseInt(tile.dataset.tileWidth, 10) || 1,\n            height: parseInt(tile.dataset.tileHeight, 10) || 1\n        };\n    }\n\n    onTilePositionChanged(tile, newPosition) {\n        tile.dataset.tilePosition = newPosition;\n    }\n}\n","import './styles/minimal.css';\nimport DragHandler from './helpers/drag-handler';\nimport BaseLayout from './layouts/base-layout';\nimport ColumnLayout from './layouts/column-layout';\nimport FlowLayout from './layouts/flow-layout';\nimport BaseAdapter from './adapters/base-adapter';\nimport DomAdapter from './adapters/dom-adapter';\n\nexport class SilkyTiles {\n    constructor() {\n        this._adapter = null;\n        this._layout = null;\n        this._layoutWidth = 0;\n        this._layoutHeight = 0;\n        this._dragHandler = new DragHandler(this);\n        this._draggingTile = null;\n\n        this._onTileAdded = this._onTileAdded.bind(this);\n        this._onTileChanged = this._onTileChanged.bind(this);\n        this._onTileRemoved = this._onTileRemoved.bind(this);\n        this._onTileDragStart = this._onTileDragStart.bind(this);\n        this._onTileDragEnd = this._onTileDragEnd.bind(this);\n        this._onTileMoved = this._onTileMoved.bind(this);\n        this._update = this._update.bind(this);\n\n        this._dragHandler.addEventListener('dragstart', this._onTileDragStart);\n        this._dragHandler.addEventListener('dragend', this._onTileDragEnd);\n        this._dragHandler.addEventListener('tilemoved', this._onTileMoved);\n\n        requestAnimationFrame(this._update);\n    }\n\n    get adapter() {\n        return this._adapter;\n    }\n\n    set adapter(adapter) {\n        if (this._adapter) {\n            this._adapter.removeEventListener('tileadded', this._onTileAdded);\n            this._adapter.removeEventListener('tilechanged', this._onTileChanged);\n            this._adapter.removeEventListener('tileremoved', this._onTileRemoved);\n            this._adapter.tiles.forEach(this._onTileRemoved);\n        }\n\n        this._adapter = adapter;\n        this._adapter.tiles.forEach(this._onTileAdded);\n        this._adapter.addEventListener('tileadded', this._onTileAdded);\n        this._adapter.addEventListener('tilechanged', this._onTileChanged);\n        this._adapter.addEventListener('tileremoved', this._onTileRemoved);\n\n        this._dragHandler.adapter = this._adapter;\n    }\n\n    get layout() {\n        return this._layout;\n    }\n\n    set layout(layout) {\n        if (this._layout && this._adapter) {\n            this._adapter.tiles.forEach(this._onTileRemoved);\n        }\n\n        this._layout = layout;\n        if (this._adapter) {\n            this._adapter.tiles.forEach(this._onTileAdded);\n        }\n    }\n\n    _onTileAdded(tile) {\n        if (this._layout) {\n            this._layout.onTileAdded(tile);\n        }\n    }\n\n    _onTileChanged(tile) {\n        if (this._layout) {\n            this._layout.onTileChanged(tile);\n        }\n    }\n\n    _onTileRemoved(tile) {\n        if (this._layout) {\n            this._layout.onTileRemoved(tile);\n        }\n    }\n\n    _onTileDragStart(tile) {\n        this._draggingTile = tile;\n    }\n\n    _onTileDragEnd(tile) {\n        this._draggingTile = null;\n        this._onTileChanged(tile);\n    }\n\n    _onTileMoved(tile, targetTile) {\n        if (this._layout) {\n            const newPositions = this._layout.onTileMoved(tile, targetTile, tile => this._adapter.getTileLayoutParams(tile));\n            for (const pos of newPositions) {\n                this._adapter.onTilePositionChanged(pos.tile, pos.newPosition);\n            }\n        }\n    }\n\n    _update() {\n        if (!this._adapter || !this._layout) return;\n\n        const changedTiles = [];\n\n        // Get layout from drag handler first, because it might add\n        // additional tiles to the queue.\n        let draggingTilePosition;\n        if (this._draggingTile) {\n            draggingTilePosition = this._dragHandler.layout();\n            changedTiles.push(this._draggingTile);\n        }\n\n        // If the container width changed, we need to layout all tiles.\n        if (this._layoutWidth !== this._adapter.container.clientWidth) {\n            this._layoutWidth = this._adapter.container.clientWidth;\n            this._layout.onWidthChanged(this._layoutWidth);\n        }\n\n        // Get layout queue.\n        changedTiles.push(...this._layout.layout(tile => this._adapter.getTileLayoutParams(tile)));\n\n        // Layout all tiles in queue.\n        for (let tile of changedTiles) {\n            const position = this._layout.getTilePosition(tile);\n            if (tile === this._draggingTile) {\n                Object.assign(position, draggingTilePosition);\n            }\n\n            tile.style.width = `${position.width}px`;\n            tile.style.height = `${position.height}px`;\n            tile.style.transform = `translateX(${position.x}px) translateY(${position.y}px)`;\n        }\n\n        // Update container height.\n        if (this._layoutHeight !== this._layout.height) {\n            this._layoutHeight = this._layout.height;\n            this._adapter.container.style.height = `${this._layoutHeight}px`;\n        }\n\n        requestAnimationFrame(this._update);\n    }\n\n    getTilePosition(tile) {\n        return this._layout && this._layout.getTilePosition(tile);\n    }\n}\n\nexport const layouts = {\n    BaseLayout,\n    ColumnLayout,\n    FlowLayout\n};\n\nexport const adapters = {\n    BaseAdapter,\n    DomAdapter\n};\n"],"names":["GridLayoutHelper"],"mappings":"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"}